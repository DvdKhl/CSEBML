//Mod. BSD License (See LICENSE file) DvdKhl (DvdKhl@web.de)
using CSEBML.DocTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace CSEBML.DocTypes.Matroska {
	public class MatroskaDocType : EBMLDocType {
		private MatroskaVersion version;

		public MatroskaDocType(MatroskaVersion version) { this.version = version; }

		public int MaxDocTypeReadVersion { get { return 4; } }


		public override byte[][] CreateSyncPoints() {
			return new byte[][]{
					new byte[]{ 0x18, 0x53, 0x80, 0x67 },
					new byte[]{ 0x11, 0x4D, 0x9B, 0x74 },
					new byte[]{ 0x15, 0x49, 0xA9, 0x66 },
					new byte[]{ 0x1F, 0x43, 0xB6, 0x75 },
					new byte[]{ 0x16, 0x54, 0xAE, 0x6B },
					new byte[]{ 0x1C, 0x53, 0xBB, 0x6B },
					new byte[]{ 0x19, 0x41, 0xA4, 0x69 },
					new byte[]{ 0x10, 0x43, 0xA7, 0x70 },
					new byte[]{ 0x12, 0x54, 0xC3, 0x67 }
				};
		}

		protected override object RetrieveByExtension(EBMLDocElement docElem, byte[] data, long offset, long length) {
			if(docElem.Id == (int)Block.Id || docElem.Id == (int)SimpleBlock.Id) {
				return new MatroskaBlock(data, offset, (int)length);
			} else {
				throw new Exception("Unhandled ElementType");
			}
		}

		protected override byte[] TransformElement(EBMLDocElement elem, object value) { throw new NotImplementedException(); }

		#region DocElements
		public static readonly EBMLDocElement Segment = new EBMLDocElement(0x18538067, EBMLElementType.Master, "Segment");
		public static readonly EBMLDocElement SeekHead = new EBMLDocElement(0x114D9B74, EBMLElementType.Master, "SeekHead");
		public static readonly EBMLDocElement Seek = new EBMLDocElement(0x00004DBB, EBMLElementType.Master, "Seek");
		public static readonly EBMLDocElement SeekID = new EBMLDocElement(0x000053AB, EBMLElementType.Binary, "SeekID");
		public static readonly EBMLDocElement SeekPosition = new EBMLDocElement(0x000053AC, EBMLElementType.UInteger, "SeekPosition");
		public static readonly EBMLDocElement Info = new EBMLDocElement(0x1549A966, EBMLElementType.Master, "Info");
		public static readonly EBMLDocElement SegmentUID = new EBMLDocElement(0x000073A4, EBMLElementType.Binary, "SegmentUID");
		public static readonly EBMLDocElement SegmentFilename = new EBMLDocElement(0x00007384, EBMLElementType.UTF8, "SegmentFilename");
		public static readonly EBMLDocElement PrevUID = new EBMLDocElement(0x003CB923, EBMLElementType.Binary, "PrevUID");
		public static readonly EBMLDocElement PrevFilename = new EBMLDocElement(0x003C83AB, EBMLElementType.UTF8, "PrevFilename");
		public static readonly EBMLDocElement NextUID = new EBMLDocElement(0x003EB923, EBMLElementType.Binary, "NextUID");
		public static readonly EBMLDocElement NextFilename = new EBMLDocElement(0x003E83BB, EBMLElementType.UTF8, "NextFilename");
		public static readonly EBMLDocElement SegmentFamily = new EBMLDocElement(0x00004444, EBMLElementType.Binary, "SegmentFamily");
		public static readonly EBMLDocElement ChapterTranslate = new EBMLDocElement(0x00006924, EBMLElementType.Master, "ChapterTranslate");
		public static readonly EBMLDocElement ChapterTranslateEditionUID = new EBMLDocElement(0x000069FC, EBMLElementType.UInteger, "ChapterTranslateEditionUID");
		public static readonly EBMLDocElement ChapterTranslateCodec = new EBMLDocElement(0x000069BF, EBMLElementType.UInteger, "ChapterTranslateCodec");
		public static readonly EBMLDocElement ChapterTranslateID = new EBMLDocElement(0x000069A5, EBMLElementType.Binary, "ChapterTranslateID");
		public static readonly EBMLDocElement TimecodeScale = new EBMLDocElement(0x002AD7B1, EBMLElementType.UInteger, "TimecodeScale");
		public static readonly EBMLDocElement Duration = new EBMLDocElement(0x00004489, EBMLElementType.Float, "Duration");
		public static readonly EBMLDocElement DateUTC = new EBMLDocElement(0x00004461, EBMLElementType.Date, "DateUTC");
		public static readonly EBMLDocElement Title = new EBMLDocElement(0x00007BA9, EBMLElementType.UTF8, "Title");
		public static readonly EBMLDocElement MuxingApp = new EBMLDocElement(0x00004D80, EBMLElementType.UTF8, "MuxingApp");
		public static readonly EBMLDocElement WritingApp = new EBMLDocElement(0x00005741, EBMLElementType.UTF8, "WritingApp");
		public static readonly EBMLDocElement Cluster = new EBMLDocElement(0x1F43B675, EBMLElementType.Master, "Cluster");
		public static readonly EBMLDocElement Timecode = new EBMLDocElement(0x000000E7, EBMLElementType.UInteger, "Timecode");
		public static readonly EBMLDocElement SilentTracks = new EBMLDocElement(0x00005854, EBMLElementType.Master, "SilentTracks");
		public static readonly EBMLDocElement SilentTrackNumber = new EBMLDocElement(0x000058D7, EBMLElementType.UInteger, "SilentTrackNumber");
		public static readonly EBMLDocElement Position = new EBMLDocElement(0x000000A7, EBMLElementType.UInteger, "Position");
		public static readonly EBMLDocElement PrevSize = new EBMLDocElement(0x000000AB, EBMLElementType.UInteger, "PrevSize");
		public static readonly EBMLDocElement SimpleBlock = new EBMLDocElement(0x000000A3, EBMLElementType.Custom, "SimpleBlock");
		public static readonly EBMLDocElement BlockGroup = new EBMLDocElement(0x000000A0, EBMLElementType.Master, "BlockGroup");
		public static readonly EBMLDocElement Block = new EBMLDocElement(0x000000A1, EBMLElementType.Custom, "Block");
		public static readonly EBMLDocElement BlockVirtual = new EBMLDocElement(0x000000A2, EBMLElementType.Binary, "BlockVirtual");
		public static readonly EBMLDocElement BlockAdditions = new EBMLDocElement(0x000075A1, EBMLElementType.Master, "BlockAdditions");
		public static readonly EBMLDocElement BlockMore = new EBMLDocElement(0x000000A6, EBMLElementType.Master, "BlockMore");
		public static readonly EBMLDocElement BlockAddID = new EBMLDocElement(0x000000EE, EBMLElementType.UInteger, "BlockAddID");
		public static readonly EBMLDocElement BlockAdditional = new EBMLDocElement(0x000000A5, EBMLElementType.Binary, "BlockAdditional");
		public static readonly EBMLDocElement BlockDuration = new EBMLDocElement(0x0000009B, EBMLElementType.UInteger, "BlockDuration");
		public static readonly EBMLDocElement ReferencePriority = new EBMLDocElement(0x000000FA, EBMLElementType.UInteger, "ReferencePriority");
		public static readonly EBMLDocElement ReferenceBlock = new EBMLDocElement(0x000000FB, EBMLElementType.SInteger, "ReferenceBlock");
		public static readonly EBMLDocElement ReferenceVirtual = new EBMLDocElement(0x000000FD, EBMLElementType.SInteger, "ReferenceVirtual");
		public static readonly EBMLDocElement CodecState = new EBMLDocElement(0x000000A4, EBMLElementType.Binary, "CodecState");
		public static readonly EBMLDocElement Slices = new EBMLDocElement(0x0000008E, EBMLElementType.Master, "Slices");
		public static readonly EBMLDocElement TimeSlice = new EBMLDocElement(0x000000E8, EBMLElementType.Master, "TimeSlice");
		public static readonly EBMLDocElement LaceNumber = new EBMLDocElement(0x000000CC, EBMLElementType.UInteger, "LaceNumber");
		public static readonly EBMLDocElement FrameNumber = new EBMLDocElement(0x000000CD, EBMLElementType.UInteger, "FrameNumber");
		public static readonly EBMLDocElement BlockAdditionID = new EBMLDocElement(0x000000CB, EBMLElementType.UInteger, "BlockAdditionID");
		public static readonly EBMLDocElement Delay = new EBMLDocElement(0x000000CE, EBMLElementType.UInteger, "Delay");
		public static readonly EBMLDocElement SliceDuration = new EBMLDocElement(0x000000CF, EBMLElementType.UInteger, "SliceDuration");
		public static readonly EBMLDocElement ReferenceFrame = new EBMLDocElement(0x000000C8, EBMLElementType.Master, "ReferenceFrame");
		public static readonly EBMLDocElement ReferenceOffset = new EBMLDocElement(0x000000C9, EBMLElementType.UInteger, "ReferenceOffset");
		public static readonly EBMLDocElement ReferenceTimeCode = new EBMLDocElement(0x000000CA, EBMLElementType.UInteger, "ReferenceTimeCode");
		public static readonly EBMLDocElement EncryptedBlock = new EBMLDocElement(0x000000AF, EBMLElementType.Binary, "EncryptedBlock");
		public static readonly EBMLDocElement Tracks = new EBMLDocElement(0x1654AE6B, EBMLElementType.Master, "Tracks");
		public static readonly EBMLDocElement TrackEntry = new EBMLDocElement(0x000000AE, EBMLElementType.Master, "TrackEntry");
		public static readonly EBMLDocElement TrackNumber = new EBMLDocElement(0x000000D7, EBMLElementType.UInteger, "TrackNumber");
		public static readonly EBMLDocElement TrackUID = new EBMLDocElement(0x000073C5, EBMLElementType.UInteger, "TrackUID");
		public static readonly EBMLDocElement TrackType = new EBMLDocElement(0x00000083, EBMLElementType.UInteger, "TrackType");
		public static readonly EBMLDocElement FlagEnabled = new EBMLDocElement(0x000000B9, EBMLElementType.UInteger, "FlagEnabled");
		public static readonly EBMLDocElement FlagDefault = new EBMLDocElement(0x00000088, EBMLElementType.UInteger, "FlagDefault");
		public static readonly EBMLDocElement FlagForced = new EBMLDocElement(0x000055AA, EBMLElementType.UInteger, "FlagForced");
		public static readonly EBMLDocElement FlagLacing = new EBMLDocElement(0x0000009C, EBMLElementType.UInteger, "FlagLacing");
		public static readonly EBMLDocElement MinCache = new EBMLDocElement(0x00006DE7, EBMLElementType.UInteger, "MinCache");
		public static readonly EBMLDocElement MaxCache = new EBMLDocElement(0x00006DF8, EBMLElementType.UInteger, "MaxCache");
		public static readonly EBMLDocElement DefaultDuration = new EBMLDocElement(0x0023E383, EBMLElementType.UInteger, "DefaultDuration");
		public static readonly EBMLDocElement DefaultDecodedFieldDuration = new EBMLDocElement(0x00234E7A, EBMLElementType.UInteger, "DefaultDecodedFieldDuration");
		public static readonly EBMLDocElement TrackTimecodeScale = new EBMLDocElement(0x0023314F, EBMLElementType.Float, "TrackTimecodeScale");
		public static readonly EBMLDocElement TrackOffset = new EBMLDocElement(0x0000537F, EBMLElementType.SInteger, "TrackOffset");
		public static readonly EBMLDocElement MaxBlockAdditionID = new EBMLDocElement(0x000055EE, EBMLElementType.UInteger, "MaxBlockAdditionID");
		public static readonly EBMLDocElement Name = new EBMLDocElement(0x0000536E, EBMLElementType.UTF8, "Name");
		public static readonly EBMLDocElement Language = new EBMLDocElement(0x0022B59C, EBMLElementType.ASCII, "Language");
		public static readonly EBMLDocElement CodecID = new EBMLDocElement(0x00000086, EBMLElementType.ASCII, "CodecID");
		public static readonly EBMLDocElement CodecPrivate = new EBMLDocElement(0x000063A2, EBMLElementType.Binary, "CodecPrivate");
		public static readonly EBMLDocElement CodecName = new EBMLDocElement(0x00258688, EBMLElementType.UTF8, "CodecName");
		public static readonly EBMLDocElement AttachmentLink = new EBMLDocElement(0x00007446, EBMLElementType.UInteger, "AttachmentLink");
		public static readonly EBMLDocElement CodecSettings = new EBMLDocElement(0x003A9697, EBMLElementType.UTF8, "CodecSettings");
		public static readonly EBMLDocElement CodecInfoURL = new EBMLDocElement(0x003B4040, EBMLElementType.ASCII, "CodecInfoURL");
		public static readonly EBMLDocElement CodecDownloadURL = new EBMLDocElement(0x0026B240, EBMLElementType.ASCII, "CodecDownloadURL");
		public static readonly EBMLDocElement CodecDecodeAll = new EBMLDocElement(0x000000AA, EBMLElementType.UInteger, "CodecDecodeAll");
		public static readonly EBMLDocElement TrackOverlay = new EBMLDocElement(0x00006FAB, EBMLElementType.UInteger, "TrackOverlay");
		public static readonly EBMLDocElement TrackTranslate = new EBMLDocElement(0x00006624, EBMLElementType.Master, "TrackTranslate");
		public static readonly EBMLDocElement TrackTranslateEditionUID = new EBMLDocElement(0x000066FC, EBMLElementType.UInteger, "TrackTranslateEditionUID");
		public static readonly EBMLDocElement TrackTranslateCodec = new EBMLDocElement(0x000066BF, EBMLElementType.UInteger, "TrackTranslateCodec");
		public static readonly EBMLDocElement TrackTranslateTrackID = new EBMLDocElement(0x000066A5, EBMLElementType.Binary, "TrackTranslateTrackID");
		public static readonly EBMLDocElement Video = new EBMLDocElement(0x000000E0, EBMLElementType.Master, "Video");
		public static readonly EBMLDocElement FlagInterlaced = new EBMLDocElement(0x0000009A, EBMLElementType.UInteger, "FlagInterlaced");
		public static readonly EBMLDocElement StereoMode = new EBMLDocElement(0x000053B8, EBMLElementType.UInteger, "StereoMode");
		public static readonly EBMLDocElement AlphaMode = new EBMLDocElement(0x000053C0, EBMLElementType.UInteger, "AlphaMode");
		public static readonly EBMLDocElement OldStereoMode = new EBMLDocElement(0x000053B9, EBMLElementType.UInteger, "OldStereoMode");
		public static readonly EBMLDocElement PixelWidth = new EBMLDocElement(0x000000B0, EBMLElementType.UInteger, "PixelWidth");
		public static readonly EBMLDocElement PixelHeight = new EBMLDocElement(0x000000BA, EBMLElementType.UInteger, "PixelHeight");
		public static readonly EBMLDocElement PixelCropBottom = new EBMLDocElement(0x000054AA, EBMLElementType.UInteger, "PixelCropBottom");
		public static readonly EBMLDocElement PixelCropTop = new EBMLDocElement(0x000054BB, EBMLElementType.UInteger, "PixelCropTop");
		public static readonly EBMLDocElement PixelCropLeft = new EBMLDocElement(0x000054CC, EBMLElementType.UInteger, "PixelCropLeft");
		public static readonly EBMLDocElement PixelCropRight = new EBMLDocElement(0x000054DD, EBMLElementType.UInteger, "PixelCropRight");
		public static readonly EBMLDocElement DisplayWidth = new EBMLDocElement(0x000054B0, EBMLElementType.UInteger, "DisplayWidth");
		public static readonly EBMLDocElement DisplayHeight = new EBMLDocElement(0x000054BA, EBMLElementType.UInteger, "DisplayHeight");
		public static readonly EBMLDocElement DisplayUnit = new EBMLDocElement(0x000054B2, EBMLElementType.UInteger, "DisplayUnit");
		public static readonly EBMLDocElement AspectRatioType = new EBMLDocElement(0x000054B3, EBMLElementType.UInteger, "AspectRatioType");
		public static readonly EBMLDocElement ColourSpace = new EBMLDocElement(0x002EB524, EBMLElementType.Binary, "ColourSpace");
		public static readonly EBMLDocElement GammaValue = new EBMLDocElement(0x002FB523, EBMLElementType.Float, "GammaValue");
		public static readonly EBMLDocElement FrameRate = new EBMLDocElement(0x002383E3, EBMLElementType.Float, "FrameRate");
		public static readonly EBMLDocElement Audio = new EBMLDocElement(0x000000E1, EBMLElementType.Master, "Audio");
		public static readonly EBMLDocElement SamplingFrequency = new EBMLDocElement(0x000000B5, EBMLElementType.Float, "SamplingFrequency");
		public static readonly EBMLDocElement OutputSamplingFrequency = new EBMLDocElement(0x000078B5, EBMLElementType.Float, "OutputSamplingFrequency");
		public static readonly EBMLDocElement Channels = new EBMLDocElement(0x0000009F, EBMLElementType.UInteger, "Channels");
		public static readonly EBMLDocElement ChannelPositions = new EBMLDocElement(0x00007D7B, EBMLElementType.Binary, "ChannelPositions");
		public static readonly EBMLDocElement BitDepth = new EBMLDocElement(0x00006264, EBMLElementType.UInteger, "BitDepth");
		public static readonly EBMLDocElement TrackOperation = new EBMLDocElement(0x000000E2, EBMLElementType.Master, "TrackOperation");
		public static readonly EBMLDocElement TrackCombinePlanes = new EBMLDocElement(0x000000E3, EBMLElementType.Master, "TrackCombinePlanes");
		public static readonly EBMLDocElement TrackPlane = new EBMLDocElement(0x000000E4, EBMLElementType.Master, "TrackPlane");
		public static readonly EBMLDocElement TrackPlaneUID = new EBMLDocElement(0x000000E5, EBMLElementType.UInteger, "TrackPlaneUID");
		public static readonly EBMLDocElement TrackPlaneType = new EBMLDocElement(0x000000E6, EBMLElementType.UInteger, "TrackPlaneType");
		public static readonly EBMLDocElement TrackJoinBlocks = new EBMLDocElement(0x000000E9, EBMLElementType.Master, "TrackJoinBlocks");
		public static readonly EBMLDocElement TrackJoinUID = new EBMLDocElement(0x000000ED, EBMLElementType.UInteger, "TrackJoinUID");
		public static readonly EBMLDocElement TrickTrackUID = new EBMLDocElement(0x000000C0, EBMLElementType.UInteger, "TrickTrackUID");
		public static readonly EBMLDocElement TrickTrackSegmentUID = new EBMLDocElement(0x000000C1, EBMLElementType.Binary, "TrickTrackSegmentUID");
		public static readonly EBMLDocElement TrickTrackFlag = new EBMLDocElement(0x000000C6, EBMLElementType.UInteger, "TrickTrackFlag");
		public static readonly EBMLDocElement TrickMasterTrackUID = new EBMLDocElement(0x000000C7, EBMLElementType.UInteger, "TrickMasterTrackUID");
		public static readonly EBMLDocElement TrickMasterTrackSegmentUID = new EBMLDocElement(0x000000C4, EBMLElementType.Binary, "TrickMasterTrackSegmentUID");
		public static readonly EBMLDocElement ContentEncodings = new EBMLDocElement(0x00006D80, EBMLElementType.Master, "ContentEncodings");
		public static readonly EBMLDocElement ContentEncoding = new EBMLDocElement(0x00006240, EBMLElementType.Master, "ContentEncoding");
		public static readonly EBMLDocElement ContentEncodingOrder = new EBMLDocElement(0x00005031, EBMLElementType.UInteger, "ContentEncodingOrder");
		public static readonly EBMLDocElement ContentEncodingScope = new EBMLDocElement(0x00005032, EBMLElementType.UInteger, "ContentEncodingScope");
		public static readonly EBMLDocElement ContentEncodingType = new EBMLDocElement(0x00005033, EBMLElementType.UInteger, "ContentEncodingType");
		public static readonly EBMLDocElement ContentCompression = new EBMLDocElement(0x00005034, EBMLElementType.Master, "ContentCompression");
		public static readonly EBMLDocElement ContentCompAlgo = new EBMLDocElement(0x00004254, EBMLElementType.UInteger, "ContentCompAlgo");
		public static readonly EBMLDocElement ContentCompSettings = new EBMLDocElement(0x00004255, EBMLElementType.Binary, "ContentCompSettings");
		public static readonly EBMLDocElement ContentEncryption = new EBMLDocElement(0x00005035, EBMLElementType.Master, "ContentEncryption");
		public static readonly EBMLDocElement ContentEncAlgo = new EBMLDocElement(0x000047E1, EBMLElementType.UInteger, "ContentEncAlgo");
		public static readonly EBMLDocElement ContentEncKeyID = new EBMLDocElement(0x000047E2, EBMLElementType.Binary, "ContentEncKeyID");
		public static readonly EBMLDocElement ContentSignature = new EBMLDocElement(0x000047E3, EBMLElementType.Binary, "ContentSignature");
		public static readonly EBMLDocElement ContentSigKeyID = new EBMLDocElement(0x000047E4, EBMLElementType.Binary, "ContentSigKeyID");
		public static readonly EBMLDocElement ContentSigAlgo = new EBMLDocElement(0x000047E5, EBMLElementType.UInteger, "ContentSigAlgo");
		public static readonly EBMLDocElement ContentSigHashAlgo = new EBMLDocElement(0x000047E6, EBMLElementType.UInteger, "ContentSigHashAlgo");
		public static readonly EBMLDocElement Cues = new EBMLDocElement(0x1C53BB6B, EBMLElementType.Master, "Cues");
		public static readonly EBMLDocElement CuePoint = new EBMLDocElement(0x000000BB, EBMLElementType.Master, "CuePoint");
		public static readonly EBMLDocElement CueTime = new EBMLDocElement(0x000000B3, EBMLElementType.UInteger, "CueTime");
		public static readonly EBMLDocElement CueTrackPositions = new EBMLDocElement(0x000000B7, EBMLElementType.Master, "CueTrackPositions");
		public static readonly EBMLDocElement CueTrack = new EBMLDocElement(0x000000F7, EBMLElementType.UInteger, "CueTrack");
		public static readonly EBMLDocElement CueClusterPosition = new EBMLDocElement(0x000000F1, EBMLElementType.UInteger, "CueClusterPosition");
		public static readonly EBMLDocElement CueRelativePosition = new EBMLDocElement(0x000000F0, EBMLElementType.UInteger, "CueRelativePosition");
		public static readonly EBMLDocElement CueDuration = new EBMLDocElement(0x000000B2, EBMLElementType.UInteger, "CueDuration");
		public static readonly EBMLDocElement CueBlockNumber = new EBMLDocElement(0x00005378, EBMLElementType.UInteger, "CueBlockNumber");
		public static readonly EBMLDocElement CueCodecState = new EBMLDocElement(0x000000EA, EBMLElementType.UInteger, "CueCodecState");
		public static readonly EBMLDocElement CueReference = new EBMLDocElement(0x000000DB, EBMLElementType.Master, "CueReference");
		public static readonly EBMLDocElement CueRefTime = new EBMLDocElement(0x00000096, EBMLElementType.UInteger, "CueRefTime");
		public static readonly EBMLDocElement CueRefCluster = new EBMLDocElement(0x00000097, EBMLElementType.UInteger, "CueRefCluster");
		public static readonly EBMLDocElement CueRefNumber = new EBMLDocElement(0x0000535F, EBMLElementType.UInteger, "CueRefNumber");
		public static readonly EBMLDocElement CueRefCodecState = new EBMLDocElement(0x000000EB, EBMLElementType.UInteger, "CueRefCodecState");
		public static readonly EBMLDocElement Attachments = new EBMLDocElement(0x1941A469, EBMLElementType.Master, "Attachments");
		public static readonly EBMLDocElement AttachedFile = new EBMLDocElement(0x000061A7, EBMLElementType.Master, "AttachedFile");
		public static readonly EBMLDocElement FileDescription = new EBMLDocElement(0x0000467E, EBMLElementType.UTF8, "FileDescription");
		public static readonly EBMLDocElement FileName = new EBMLDocElement(0x0000466E, EBMLElementType.UTF8, "FileName");
		public static readonly EBMLDocElement FileMimeType = new EBMLDocElement(0x00004660, EBMLElementType.ASCII, "FileMimeType");
		public static readonly EBMLDocElement FileData = new EBMLDocElement(0x0000465C, EBMLElementType.Binary, "FileData");
		public static readonly EBMLDocElement FileUID = new EBMLDocElement(0x000046AE, EBMLElementType.UInteger, "FileUID");
		public static readonly EBMLDocElement FileReferral = new EBMLDocElement(0x00004675, EBMLElementType.Binary, "FileReferral");
		public static readonly EBMLDocElement FileUsedStartTime = new EBMLDocElement(0x00004661, EBMLElementType.UInteger, "FileUsedStartTime");
		public static readonly EBMLDocElement FileUsedEndTime = new EBMLDocElement(0x00004662, EBMLElementType.UInteger, "FileUsedEndTime");
		public static readonly EBMLDocElement Chapters = new EBMLDocElement(0x1043A770, EBMLElementType.Master, "Chapters");
		public static readonly EBMLDocElement EditionEntry = new EBMLDocElement(0x000045B9, EBMLElementType.Master, "EditionEntry");
		public static readonly EBMLDocElement EditionUID = new EBMLDocElement(0x000045BC, EBMLElementType.UInteger, "EditionUID");
		public static readonly EBMLDocElement EditionFlagHidden = new EBMLDocElement(0x000045BD, EBMLElementType.UInteger, "EditionFlagHidden");
		public static readonly EBMLDocElement EditionFlagDefault = new EBMLDocElement(0x000045DB, EBMLElementType.UInteger, "EditionFlagDefault");
		public static readonly EBMLDocElement EditionFlagOrdered = new EBMLDocElement(0x000045DD, EBMLElementType.UInteger, "EditionFlagOrdered");
		public static readonly EBMLDocElement ChapterAtom = new EBMLDocElement(0x000000B6, EBMLElementType.Master, "ChapterAtom");
		public static readonly EBMLDocElement ChapterUID = new EBMLDocElement(0x000073C4, EBMLElementType.UInteger, "ChapterUID");
		public static readonly EBMLDocElement ChapterTimeStart = new EBMLDocElement(0x00000091, EBMLElementType.UInteger, "ChapterTimeStart");
		public static readonly EBMLDocElement ChapterTimeEnd = new EBMLDocElement(0x00000092, EBMLElementType.UInteger, "ChapterTimeEnd");
		public static readonly EBMLDocElement ChapterFlagHidden = new EBMLDocElement(0x00000098, EBMLElementType.UInteger, "ChapterFlagHidden");
		public static readonly EBMLDocElement ChapterFlagEnabled = new EBMLDocElement(0x00004598, EBMLElementType.UInteger, "ChapterFlagEnabled");
		public static readonly EBMLDocElement ChapterSegmentUID = new EBMLDocElement(0x00006E67, EBMLElementType.Binary, "ChapterSegmentUID");
		public static readonly EBMLDocElement ChapterSegmentEditionUID = new EBMLDocElement(0x00006EBC, EBMLElementType.Binary, "ChapterSegmentEditionUID");
		public static readonly EBMLDocElement ChapterPhysicalEquiv = new EBMLDocElement(0x000063C3, EBMLElementType.UInteger, "ChapterPhysicalEquiv");
		public static readonly EBMLDocElement ChapterTrack = new EBMLDocElement(0x0000008F, EBMLElementType.Master, "ChapterTrack");
		public static readonly EBMLDocElement ChapterTrackNumber = new EBMLDocElement(0x00000089, EBMLElementType.UInteger, "ChapterTrackNumber");
		public static readonly EBMLDocElement ChapterDisplay = new EBMLDocElement(0x00000080, EBMLElementType.Master, "ChapterDisplay");
		public static readonly EBMLDocElement ChapString = new EBMLDocElement(0x00000085, EBMLElementType.UTF8, "ChapString");
		public static readonly EBMLDocElement ChapLanguage = new EBMLDocElement(0x0000437C, EBMLElementType.ASCII, "ChapLanguage");
		public static readonly EBMLDocElement ChapCountry = new EBMLDocElement(0x0000437E, EBMLElementType.ASCII, "ChapCountry");
		public static readonly EBMLDocElement ChapProcess = new EBMLDocElement(0x00006944, EBMLElementType.Master, "ChapProcess");
		public static readonly EBMLDocElement ChapProcessCodecID = new EBMLDocElement(0x00006955, EBMLElementType.UInteger, "ChapProcessCodecID");
		public static readonly EBMLDocElement ChapProcessPrivate = new EBMLDocElement(0x0000450D, EBMLElementType.Binary, "ChapProcessPrivate");
		public static readonly EBMLDocElement ChapProcessCommand = new EBMLDocElement(0x00006911, EBMLElementType.Master, "ChapProcessCommand");
		public static readonly EBMLDocElement ChapProcessTime = new EBMLDocElement(0x00006922, EBMLElementType.UInteger, "ChapProcessTime");
		public static readonly EBMLDocElement ChapProcessData = new EBMLDocElement(0x00006933, EBMLElementType.Binary, "ChapProcessData");
		public static readonly EBMLDocElement Tags = new EBMLDocElement(0x1254C367, EBMLElementType.Master, "Tags");
		public static readonly EBMLDocElement Tag = new EBMLDocElement(0x00007373, EBMLElementType.Master, "Tag");
		public static readonly EBMLDocElement Targets = new EBMLDocElement(0x000063C0, EBMLElementType.Master, "Targets");
		public static readonly EBMLDocElement TargetTypeValue = new EBMLDocElement(0x000068CA, EBMLElementType.UInteger, "TargetTypeValue");
		public static readonly EBMLDocElement TargetType = new EBMLDocElement(0x000063CA, EBMLElementType.ASCII, "TargetType");
		public static readonly EBMLDocElement TagTrackUID = new EBMLDocElement(0x000063C5, EBMLElementType.UInteger, "TagTrackUID");
		public static readonly EBMLDocElement TagEditionUID = new EBMLDocElement(0x000063C9, EBMLElementType.UInteger, "TagEditionUID");
		public static readonly EBMLDocElement TagChapterUID = new EBMLDocElement(0x000063C4, EBMLElementType.UInteger, "TagChapterUID");
		public static readonly EBMLDocElement TagAttachmentUID = new EBMLDocElement(0x000063C6, EBMLElementType.UInteger, "TagAttachmentUID");
		public static readonly EBMLDocElement SimpleTag = new EBMLDocElement(0x000067C8, EBMLElementType.Master, "SimpleTag");
		public static readonly EBMLDocElement TagName = new EBMLDocElement(0x000045A3, EBMLElementType.UTF8, "TagName");
		public static readonly EBMLDocElement TagLanguage = new EBMLDocElement(0x0000447A, EBMLElementType.ASCII, "TagLanguage");
		public static readonly EBMLDocElement TagDefault = new EBMLDocElement(0x00004484, EBMLElementType.UInteger, "TagDefault");
		public static readonly EBMLDocElement TagString = new EBMLDocElement(0x00004487, EBMLElementType.UTF8, "TagString");
		public static readonly EBMLDocElement TagBinary = new EBMLDocElement(0x00004485, EBMLElementType.Binary, "TagBinary");
		#endregion

		public static Dictionary<Int32, MatroskaDocMetaElement> metaList = new Dictionary<int, MatroskaDocMetaElement>();
		static MatroskaDocType() { metaList = EnumerateMetaData().ToDictionary(item => item.Id); }

		private static IEnumerable<MatroskaDocMetaElement> EnumerateMetaData() {
			Predicate<object> notNull = obj => obj is ulong ? ((ulong)obj != 0) : (obj is double ? ((double)obj != 0) : (obj is float ? ((float)obj != 0) : (obj is long ? ((long)obj != 0) : false)));
			Predicate<object> greaterNull = obj => obj is ulong ? ((ulong)obj > 0) : (obj is double ? ((double)obj > 0) : (obj is float ? ((float)obj > 0) : (obj is long ? ((long)obj > 0) : false)));
			Predicate<object> zeroOrOne = obj => obj is ulong ? ((ulong)obj == 0 || (ulong)obj == 1) : (obj is double ? ((double)obj == 0 || (double)obj == 1) : (obj is float ? ((float)obj == 0 || (float)obj == 1) : (obj is long ? ((long)obj == 0 || (long)obj == 1) : false)));

			yield return new MatroskaDocMetaElement(0x18538067, "1234WMaMu", null, null, null, "This element contains all other top-level (level 1) elements. Typically a Matroska file is composed of 1 segment.");
			yield return new MatroskaDocMetaElement(0x114D9B74, "1234W  Mu", null, null, new int[] { Segment.Id }, "Contains the position of other level 1 elements.");
			yield return new MatroskaDocMetaElement(0x00004DBB, "1234WMaMu", null, null, new int[] { SeekHead.Id }, "Contains a single seek entry to an EBML element.");
			yield return new MatroskaDocMetaElement(0x000053AB, "1234WMa  ", null, null, new int[] { Seek.Id }, "The binary ID corresponding to the element name.");
			yield return new MatroskaDocMetaElement(0x000053AC, "1234WMa  ", null, null, new int[] { Seek.Id }, "The position of the element in the segment in octets (0 = first level 1 element).");
			yield return new MatroskaDocMetaElement(0x1549A966, "1234WMaMu", null, null, new int[] { Segment.Id }, "Contains miscellaneous general information and statistics on the file.");
			yield return new MatroskaDocMetaElement(0x000073A4, "1234     ", null, val => val is Byte[] && !(new Guid((Byte[])val)).Equals(new Guid(new Byte[16])), new int[] { Info.Id }, "A randomly generated unique ID to identify the current segment between many others (128 bits).");
			yield return new MatroskaDocMetaElement(0x00007384, "1234     ", null, null, new int[] { Info.Id }, "A filename corresponding to this segment.");
			yield return new MatroskaDocMetaElement(0x003CB923, "1234     ", null, null, new int[] { Info.Id }, "A unique ID to identify the previous chained segment (128 bits).");
			yield return new MatroskaDocMetaElement(0x003C83AB, "1234     ", null, null, new int[] { Info.Id }, "An escaped filename corresponding to the previous segment.");
			yield return new MatroskaDocMetaElement(0x003EB923, "1234     ", null, null, new int[] { Info.Id }, "A unique ID to identify the next chained segment (128 bits).");
			yield return new MatroskaDocMetaElement(0x003E83BB, "1234     ", null, null, new int[] { Info.Id }, "An escaped filename corresponding to the next segment.");
			yield return new MatroskaDocMetaElement(0x00004444, "1234   Mu", null, null, new int[] { Info.Id }, "A randomly generated unique ID that all segments related to each other must use (128 bits).");
			yield return new MatroskaDocMetaElement(0x00006924, "1234   Mu", null, null, new int[] { Info.Id }, "A tuple of corresponding ID used by chapter codecs to represent this segment.");
			yield return new MatroskaDocMetaElement(0x000069FC, "1234   Mu", null, null, new int[] { ChapterTranslate.Id }, "Specify an edition UID on which this correspondance applies. When not specified, it means for all editions found in the segment.");
			yield return new MatroskaDocMetaElement(0x000069BF, "1234 Ma  ", null, null, new int[] { ChapterTranslate.Id }, "The chapter codec using this ID (0: Matroska Script, 1: DVD-menu).");
			yield return new MatroskaDocMetaElement(0x000069A5, "1234 Ma  ", null, null, new int[] { ChapterTranslate.Id }, "The binary value used to represent this segment in the chapter codec data. The format depends on the ChapProcessCodecID used.");
			yield return new MatroskaDocMetaElement(0x002AD7B1, "1234WMa  ", 1000000UL, null, new int[] { Info.Id }, "Timecode scale in nanoseconds (1.000.000 means all timecodes in the segment are expressed in milliseconds).");
			yield return new MatroskaDocMetaElement(0x00004489, "1234W    ", null, val => val is float && (float)val > 0, new int[] { Info.Id }, "Duration of the segment (based on TimecodeScale).");
			yield return new MatroskaDocMetaElement(0x00004461, "1234W    ", null, null, new int[] { Info.Id }, "Date of the origin of timecode (value 0), i.e. production date.");
			yield return new MatroskaDocMetaElement(0x00007BA9, "1234     ", null, null, new int[] { Info.Id }, "General name of the segment.");
			yield return new MatroskaDocMetaElement(0x00004D80, "1234WMa  ", null, null, new int[] { Info.Id }, "Muxing application or library ('libmatroska-0.4.3').");
			yield return new MatroskaDocMetaElement(0x00005741, "1234WMa  ", null, null, new int[] { Info.Id }, "Writing application ('mkvmerge-0.3.3').");
			yield return new MatroskaDocMetaElement(0x1F43B675, "1234W  Mu", null, null, new int[] { Segment.Id }, "The lower level element containing the (monolithic) Block structure.");
			yield return new MatroskaDocMetaElement(0x000000E7, "1234WMa  ", null, null, new int[] { Cluster.Id }, "Absolute timecode of the cluster (based on TimecodeScale).");
			yield return new MatroskaDocMetaElement(0x00005854, "1234     ", null, null, new int[] { Cluster.Id }, "The list of tracks that are not used in that part of the stream. It is useful when using overlay tracks on seeking. Then you should decide what track to use.");
			yield return new MatroskaDocMetaElement(0x000058D7, "1234   Mu", null, null, new int[] { SilentTracks.Id }, "One of the track number that are not used from now on in the stream. It could change later if not specified as silent in a further Cluster.");
			yield return new MatroskaDocMetaElement(0x000000A7, "1234     ", null, null, new int[] { Cluster.Id }, "The Position of the Cluster in the segment (0 in live broadcast streams). It might help to resynchronise offset on damaged streams.");
			yield return new MatroskaDocMetaElement(0x000000AB, "1234W    ", null, null, new int[] { Cluster.Id }, "Size of the previous Cluster, in octets. Can be useful for backward playing.");
			yield return new MatroskaDocMetaElement(0x000000A3, " 234W  Mu", null, null, new int[] { Cluster.Id }, "Similar to Block but without all the extra information, mostly used to reduced overhead when no extra feature is needed. (see SimpleBlock Structure)");
			yield return new MatroskaDocMetaElement(0x000000A0, "1234W  Mu", null, null, new int[] { Cluster.Id }, "Basic container of information containing a single Block or BlockVirtual, and information specific to that Block/VirtualBlock.");
			yield return new MatroskaDocMetaElement(0x000000A1, "1234WMa  ", null, null, new int[] { BlockGroup.Id }, "Block containing the actual data to be rendered and a timecode relative to the Cluster Timecode. (see Block Structure)");
			yield return new MatroskaDocMetaElement(0x000000A2, "         ", null, null, new int[] { BlockGroup.Id }, "A Block with no data. It must be stored in the stream at the place the real Block should be in display order. (see Block Virtual)");
			yield return new MatroskaDocMetaElement(0x000075A1, "1234     ", null, null, new int[] { BlockGroup.Id }, "Contain additional blocks to complete the main one. An EBML parser that has no knowledge of the Block structure could still see and use/skip these data.");
			yield return new MatroskaDocMetaElement(0x000000A6, "1234 MaMu", null, null, new int[] { BlockAdditions.Id }, "Contain the BlockAdditional and some parameters.");
			yield return new MatroskaDocMetaElement(0x000000EE, "1234 Ma  ", 1UL, val => val is UInt64 && (UInt64)val != 0, new int[] { BlockMore.Id }, "An ID to identify the BlockAdditional level.");
			yield return new MatroskaDocMetaElement(0x000000A5, "1234 Ma  ", null, null, new int[] { BlockMore.Id }, "Interpreted by the codec as it wishes (using the BlockAddID).");
			yield return new MatroskaDocMetaElement(0x0000009B, "1234W    ", "&TrackDuration", null, new int[] { BlockGroup.Id }, "The duration of the Block (based on TimecodeScale). This element is mandatory when DefaultDuration is set for the track. When not written and with no DefaultDuration, the value is assumed to be the difference between the timecode of this Block and the timecode of the next Block in 'display' order (not coding order). This element can be useful at the end of a Track (as there is not other Block available), or when there is a break in a track like for subtitle tracks.");
			yield return new MatroskaDocMetaElement(0x000000FA, "1234 Ma  ", 0UL, null, new int[] { BlockGroup.Id }, "This frame is referenced and has the specified cache priority. In cache only a frame of the same or higher priority can replace this frame. A value of 0 means the frame is not referenced.");
			yield return new MatroskaDocMetaElement(0x000000FB, "1234W  Mu", null, null, new int[] { BlockGroup.Id }, "Timecode of another frame used as a reference (ie: B or P frame). The timecode is relative to the block it's attached to.");
			yield return new MatroskaDocMetaElement(0x000000FD, "         ", null, null, new int[] { BlockGroup.Id }, "Relative position of the data that should be in position of the virtual block.");
			yield return new MatroskaDocMetaElement(0x000000A4, " 234     ", null, null, new int[] { BlockGroup.Id }, "The new codec state to use. Data interpretation is private to the codec. This information should always be referenced by a seek entry.");
			yield return new MatroskaDocMetaElement(0x0000008E, "1234W    ", null, null, new int[] { BlockGroup.Id }, "Contains slices description.");
			yield return new MatroskaDocMetaElement(0x000000E8, "1234W  Mu", null, null, new int[] { Slices.Id }, "Contains extra time information about the data contained in the Block. While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback.");
			yield return new MatroskaDocMetaElement(0x000000CC, "1234W    ", 0UL, null, new int[] { TimeSlice.Id }, "The reverse number of the frame in the lace (0 is the last frame, 1 is the next to last, etc). While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback.");
			yield return new MatroskaDocMetaElement(0x000000CD, "         ", 0UL, null, new int[] { TimeSlice.Id }, "The number of the frame to generate from this lace with this delay (allow you to generate many frames from the same Block/Frame).");
			yield return new MatroskaDocMetaElement(0x000000CB, "         ", 0UL, null, new int[] { TimeSlice.Id }, "The ID of the BlockAdditional element (0 is the main Block).");
			yield return new MatroskaDocMetaElement(0x000000CE, "         ", 0UL, null, new int[] { TimeSlice.Id }, "The (scaled) delay to apply to the element.");
			yield return new MatroskaDocMetaElement(0x000000CF, "         ", 0UL, null, new int[] { TimeSlice.Id }, "The (scaled) duration to apply to the element.");
			yield return new MatroskaDocMetaElement(0x000000C8, "         ", null, null, new int[] { BlockGroup.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000C9, "     Ma  ", null, null, new int[] { ReferenceFrame.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000CA, "     Ma  ", null, null, new int[] { ReferenceFrame.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000AF, "       Mu", null, null, new int[] { Cluster.Id }, "Similar to SimpleBlock but the data inside the Block are Transformed (encrypt and/or signed). (see EncryptedBlock Structure)");
			yield return new MatroskaDocMetaElement(0x1654AE6B, "1234W  Mu", null, null, new int[] { Segment.Id }, "A top-level block of information with many tracks described.");
			yield return new MatroskaDocMetaElement(0x000000AE, "1234WMaMu", null, null, new int[] { Tracks.Id }, "Describes a track with all elements.");
			yield return new MatroskaDocMetaElement(0x000000D7, "1234WMa  ", null, val => val is UInt64 && (UInt64)val != 0, new int[] { TrackEntry.Id }, "The track number as used in the Block Header (using more than 127 tracks is not encouraged, though the design allows an unlimited number).");
			yield return new MatroskaDocMetaElement(0x000073C5, "1234WMa  ", null, val => val is UInt64 && (UInt64)val != 0, new int[] { TrackEntry.Id }, "A unique ID to identify the Track. This should be kept the same when making a direct stream copy of the Track to another file.");
			yield return new MatroskaDocMetaElement(0x00000083, "1234WMa  ", null, val => val is UInt64 && (UInt64)val != 0 && (UInt64)val < 255, new int[] { TrackEntry.Id }, "A set of track types coded on 8 bits (1: video, 2: audio, 3: complex, 0x10: logo, 0x11: subtitle, 0x12: buttons, 0x20: control).");
			yield return new MatroskaDocMetaElement(0x000000B9, " 234WMa  ", 1UL, val => val is UInt64 && ((UInt64)val == 0 || (UInt64)val == 1), new int[] { TrackEntry.Id }, "Set if the track is used. (1 bit)");
			yield return new MatroskaDocMetaElement(0x00000088, "1234WMa  ", 1UL, val => val is UInt64 && ((UInt64)val == 0 || (UInt64)val == 1), new int[] { TrackEntry.Id }, "Set if that track (audio, video or subs) SHOULD be used if no language found matches the user preference. (1 bit)");
			yield return new MatroskaDocMetaElement(0x000055AA, "1234WMa  ", 0UL, val => val is UInt64 && ((UInt64)val == 0 || (UInt64)val == 1), new int[] { TrackEntry.Id }, "Set if that track MUST be used during playback. There can be many forced track for a kind (audio, video or subs), the player should select the one which language matches the user preference or the default + forced track. Overlay MAY happen between a forced and non-forced track of the same kind. (1 bit)");
			yield return new MatroskaDocMetaElement(0x0000009C, "1234WMa  ", 1UL, val => val is UInt64 && ((UInt64)val == 0 || (UInt64)val == 1), new int[] { TrackEntry.Id }, "Set if the track may contain blocks using lacing. (1 bit)");
			yield return new MatroskaDocMetaElement(0x00006DE7, "1234 Ma  ", 0UL, null, new int[] { TrackEntry.Id }, "The minimum number of frames a player should be able to cache during playback. If set to 0, the reference pseudo-cache system is not used.");
			yield return new MatroskaDocMetaElement(0x00006DF8, "1234     ", null, null, new int[] { TrackEntry.Id }, "The maximum cache size required to store referenced frames in and the current frame. 0 means no cache is needed.");
			yield return new MatroskaDocMetaElement(0x0023E383, "1234W    ", null, notNull, new int[] { TrackEntry.Id }, "Number of nanoseconds (i.e. not scaled) per frame.");
			yield return new MatroskaDocMetaElement(0x00234E7A, "   4     ", null, notNull, new int[] { TrackEntry.Id }, "The period in nanoseconds (not scaled by TimcodeScale) between two successive fields at the output of the decoding process (see the notes).");
			yield return new MatroskaDocMetaElement(0x0023314F, "1234 Ma  ", 1.0f, greaterNull, new int[] { TrackEntry.Id }, "The scale to apply on this track to work at normal speed in relation with other tracks (mostly used to adjust video speed when the audio length differs).");
			yield return new MatroskaDocMetaElement(0x0000537F, "         ", 0L, null, new int[] { TrackEntry.Id }, "A value to add to the Block's Timecode. This can be used to adjust the playback offset of a track.");
			yield return new MatroskaDocMetaElement(0x000055EE, "1234 Ma  ", 0UL, null, new int[] { TrackEntry.Id }, "The maximum value of BlockAddID. A value 0 means there is no BlockAdditions for this track.");
			yield return new MatroskaDocMetaElement(0x0000536E, "1234W    ", null, null, new int[] { TrackEntry.Id }, "A human-readable track name.");
			yield return new MatroskaDocMetaElement(0x0022B59C, "1234W    ", "eng", null, new int[] { TrackEntry.Id }, "Specifies the language of the track in the Matroska languages form.");
			yield return new MatroskaDocMetaElement(0x00000086, "1234WMa  ", null, null, new int[] { TrackEntry.Id }, "An ID corresponding to the codec, see the codec page for more info.");
			yield return new MatroskaDocMetaElement(0x000063A2, "1234W    ", null, null, new int[] { TrackEntry.Id }, "Private data only known to the codec.");
			yield return new MatroskaDocMetaElement(0x00258688, "1234W    ", null, null, new int[] { TrackEntry.Id }, "A human-readable string specifying the codec.");
			yield return new MatroskaDocMetaElement(0x00007446, "1234     ", null, notNull, new int[] { TrackEntry.Id }, "The UID of an attachment that is used by this codec.");
			yield return new MatroskaDocMetaElement(0x003A9697, "         ", null, null, new int[] { TrackEntry.Id }, "A string describing the encoding setting used.");
			yield return new MatroskaDocMetaElement(0x003B4040, "       Mu", null, null, new int[] { TrackEntry.Id }, "A URL to find information about the codec used.");
			yield return new MatroskaDocMetaElement(0x0026B240, "       Mu", null, null, new int[] { TrackEntry.Id }, "A URL to download about the codec used.");
			yield return new MatroskaDocMetaElement(0x000000AA, " 234 Ma  ", 1UL, zeroOrOne, new int[] { TrackEntry.Id }, "The codec can decode potentially damaged data (1 bit).");
			yield return new MatroskaDocMetaElement(0x00006FAB, "1234   Mu", null, null, new int[] { TrackEntry.Id }, "Specify that this track is an overlay track for the Track specified (in the u-integer). That means when this track has a gap (see SilentTracks) the overlay track should be used instead. The order of multiple TrackOverlay matters, the first one is the one that should be used. If not found it should be the second, etc.");
			yield return new MatroskaDocMetaElement(0x00006624, "1234   Mu", null, null, new int[] { TrackEntry.Id }, "The track identification for the given Chapter Codec.");
			yield return new MatroskaDocMetaElement(0x000066FC, "1234   Mu", null, null, new int[] { TrackTranslate.Id }, "Specify an edition UID on which this translation applies. When not specified, it means for all editions found in the segment.");
			yield return new MatroskaDocMetaElement(0x000066BF, "1234 Ma  ", null, null, new int[] { TrackTranslate.Id }, "The chapter codec using this ID (0: Matroska Script, 1: DVD-menu).");
			yield return new MatroskaDocMetaElement(0x000066A5, "1234 Ma  ", null, null, new int[] { TrackTranslate.Id }, "The binary value used to represent this track in the chapter codec data. The format depends on the ChapProcessCodecID used.");
			yield return new MatroskaDocMetaElement(0x000000E0, "1234W    ", null, null, new int[] { TrackEntry.Id }, "Video settings.");
			yield return new MatroskaDocMetaElement(0x0000009A, " 234WMa  ", 0UL, zeroOrOne, new int[] { Video.Id }, "Set if the video is interlaced. (1 bit)");
			yield return new MatroskaDocMetaElement(0x000053B8, "  34W    ", 0UL, null, new int[] { Video.Id }, "Stereo-3D video mode (0: mono, 1: side by side (left eye is first), 2: top-bottom (right eye is first), 3: top-bottom (left eye is first), 4: checkboard (right is first), 5: checkboard (left is first), 6: row interleaved (right is first), 7: row interleaved (left is first), 8: column interleaved (right is first), 9: column interleaved (left is first), 10: anaglyph (cyan/red), 11: side by side (right eye is first), 12: anaglyph (green/magenta), 13 both eyes laced in one Block (left eye is first), 14 both eyes laced in one Block (right eye is first)). There are some more details on 3D support in the Specification Notes.");
			yield return new MatroskaDocMetaElement(0x000053C0, "  34W    ", 0UL, null, new int[] { Video.Id }, "Alpha Video Mode. Presence of this element indicates that the BlockAdditional element could contain Alpha data.");
			yield return new MatroskaDocMetaElement(0x000053B9, "         ", null, null, new int[] { Video.Id }, "Bogus StereoMode value used in old versions of libmatroska. DO NOT USE. (0: mono, 1: right eye, 2: left eye, 3: both eyes).");
			yield return new MatroskaDocMetaElement(0x000000B0, "1234WMa  ", null, notNull, new int[] { Video.Id }, "Width of the encoded video frames in pixels.");
			yield return new MatroskaDocMetaElement(0x000000BA, "1234WMa  ", null, notNull, new int[] { Video.Id }, "Height of the encoded video frames in pixels.");
			yield return new MatroskaDocMetaElement(0x000054AA, "1234W    ", 0UL, null, new int[] { Video.Id }, "The number of video pixels to remove at the bottom of the image (for HDTV content).");
			yield return new MatroskaDocMetaElement(0x000054BB, "1234W    ", 0UL, null, new int[] { Video.Id }, "The number of video pixels to remove at the top of the image.");
			yield return new MatroskaDocMetaElement(0x000054CC, "1234W    ", 0UL, null, new int[] { Video.Id }, "The number of video pixels to remove on the left of the image.");
			yield return new MatroskaDocMetaElement(0x000054DD, "1234W    ", 0UL, null, new int[] { Video.Id }, "The number of video pixels to remove on the right of the image.");
			yield return new MatroskaDocMetaElement(0x000054B0, "1234W    ", "&PixelWidth", notNull, new int[] { Video.Id }, "Width of the video frames to display. The default value is only valid when DisplayUnit is 0.");
			yield return new MatroskaDocMetaElement(0x000054BA, "1234W    ", "&PixelHeight", notNull, new int[] { Video.Id }, "Height of the video frames to display. The default value is only valid when DisplayUnit is 0.");
			yield return new MatroskaDocMetaElement(0x000054B2, "1234W    ", 0UL, null, new int[] { Video.Id }, "How DisplayWidth & DisplayHeight should be interpreted (0: pixels, 1: centimeters, 2: inches, 3: Display Aspect Ratio).");
			yield return new MatroskaDocMetaElement(0x000054B3, "1234W    ", 0UL, null, new int[] { Video.Id }, "Specify the possible modifications to the aspect ratio (0: free resizing, 1: keep aspect ratio, 2: fixed).");
			yield return new MatroskaDocMetaElement(0x002EB524, "1234     ", null, null, new int[] { Video.Id }, "Same value as in AVI (32 bits).");
			yield return new MatroskaDocMetaElement(0x002FB523, "         ", null, greaterNull, new int[] { Video.Id }, "Gamma Value.");
			yield return new MatroskaDocMetaElement(0x002383E3, "         ", null, greaterNull, new int[] { Video.Id }, "Number of frames per second. Informational only.");
			yield return new MatroskaDocMetaElement(0x000000E1, "1234W    ", null, null, new int[] { TrackEntry.Id }, "Audio settings.");
			yield return new MatroskaDocMetaElement(0x000000B5, "1234WMa  ", 8000.0f, greaterNull, new int[] { Audio.Id }, "Sampling frequency in Hz.");
			yield return new MatroskaDocMetaElement(0x000078B5, "1234W    ", "&SamplingFrequency", greaterNull, new int[] { Audio.Id }, "Real output sampling frequency in Hz (used for SBR techniques).");
			yield return new MatroskaDocMetaElement(0x0000009F, "1234WMa  ", 1UL, notNull, new int[] { Audio.Id }, "Numbers of channels in the track.");
			yield return new MatroskaDocMetaElement(0x00007D7B, "         ", null, null, new int[] { Audio.Id }, "Table of horizontal angles for each successive channel, see appendix.");
			yield return new MatroskaDocMetaElement(0x00006264, "1234W    ", null, notNull, new int[] { Audio.Id }, "Bits per sample, mostly used for PCM.");
			yield return new MatroskaDocMetaElement(0x000000E2, "  34     ", null, null, new int[] { TrackEntry.Id }, "Operation that needs to be applied on tracks to create this virtual track. For more details look at the Specification Notes on the subject.");
			yield return new MatroskaDocMetaElement(0x000000E3, "  34     ", null, null, new int[] { TrackOperation.Id }, "Contains the list of all video plane tracks that need to be combined to create this 3D track");
			yield return new MatroskaDocMetaElement(0x000000E4, "  34 MaMu", null, null, new int[] { TrackCombinePlanes.Id }, "Contains a video plane track that need to be combined to create this 3D track");
			yield return new MatroskaDocMetaElement(0x000000E5, "  34 Ma  ", null, notNull, new int[] { TrackPlane.Id }, "The trackUID number of the track representing the plane.");
			yield return new MatroskaDocMetaElement(0x000000E6, "  34 Ma  ", null, null, new int[] { TrackPlane.Id }, "The kind of plane this track corresponds to (0: left eye, 1: right eye, 2: background).");
			yield return new MatroskaDocMetaElement(0x000000E9, "  34     ", null, null, new int[] { TrackOperation.Id }, "Contains the list of all tracks whose Blocks need to be combined to create this virtual track");
			yield return new MatroskaDocMetaElement(0x000000ED, "  34 MaMu", null, notNull, new int[] { TrackJoinBlocks.Id }, "The trackUID number of a track whose blocks are used to create this virtual track.");
			yield return new MatroskaDocMetaElement(0x000000C0, "         ", null, null, new int[] { TrackEntry.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000C1, "         ", null, null, new int[] { TrackEntry.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000C6, "         ", 0UL, null, new int[] { TrackEntry.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000C7, "         ", null, null, new int[] { TrackEntry.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x000000C4, "         ", null, null, new int[] { TrackEntry.Id }, "DivX trick track extenstions");
			yield return new MatroskaDocMetaElement(0x00006D80, "1234     ", null, null, new int[] { TrackEntry.Id }, "Settings for several content encoding mechanisms like compression or encryption.");
			yield return new MatroskaDocMetaElement(0x00006240, "1234 MaMu", null, null, new int[] { ContentEncodings.Id }, "Settings for one content encoding like compression or encryption.");
			yield return new MatroskaDocMetaElement(0x00005031, "1234 Ma  ", 0UL, null, new int[] { ContentEncoding.Id }, "Tells when this modification was used during encoding/muxing starting with 0 and counting upwards. The decoder/demuxer has to start with the highest order number it finds and work its way down. This value has to be unique over all ContentEncodingOrder elements in the segment.");
			yield return new MatroskaDocMetaElement(0x00005032, "1234 Ma  ", 1UL, notNull, new int[] { ContentEncoding.Id }, "A bit field that describes which elements have been modified in this way. Values (big endian) can be OR'ed. Possible values: \n1 - all frame contents,\n2 - the track's private data,\n4 - the next ContentEncoding (next ContentEncodingOrder. Either the data inside ContentCompression and/or ContentEncryption)");
			yield return new MatroskaDocMetaElement(0x00005033, "1234 Ma  ", 0UL, null, new int[] { ContentEncoding.Id }, "A value describing what kind of transformation has been done. Possible values:\n0 - compression,\n1 - encryption");
			yield return new MatroskaDocMetaElement(0x00005034, "1234     ", null, null, new int[] { ContentEncoding.Id }, "Settings describing the compression used. Must be present if the value of ContentEncodingType is 0 and absent otherwise. Each block must be decompressable even if no previous block is available in order not to prevent seeking.");
			yield return new MatroskaDocMetaElement(0x00004254, "1234 Ma  ", 0UL, null, new int[] { ContentCompression.Id }, "The compression algorithm used. Algorithms that have been specified so far are:\n0 - zlib,\n1 - bzlib,\n2 - lzo1x\n3 - Header Stripping");
			yield return new MatroskaDocMetaElement(0x00004255, "1234     ", null, null, new int[] { ContentCompression.Id }, "Settings that might be needed by the decompressor. For Header Stripping (ContentCompAlgo=3), the bytes that were removed from the beggining of each frames of the track.");
			yield return new MatroskaDocMetaElement(0x00005035, "1234     ", null, null, new int[] { ContentEncoding.Id }, "Settings describing the encryption used. Must be present if the value of ContentEncodingType is 1 and absent otherwise.");
			yield return new MatroskaDocMetaElement(0x000047E1, "1234     ", 0UL, null, new int[] { ContentEncryption.Id }, "The encryption algorithm used. The value '0' means that the contents have not been encrypted but only signed. Predefined values:\n1 - DES, 2 - 3DES, 3 - Twofish, 4 - Blowfish, 5 - AES");
			yield return new MatroskaDocMetaElement(0x000047E2, "1234     ", null, null, new int[] { ContentEncryption.Id }, "For public key algorithms this is the ID of the public key the the data was encrypted with.");
			yield return new MatroskaDocMetaElement(0x000047E3, "1234     ", null, null, new int[] { ContentEncryption.Id }, "A cryptographic signature of the contents.");
			yield return new MatroskaDocMetaElement(0x000047E4, "1234     ", null, null, new int[] { ContentEncryption.Id }, "This is the ID of the private key the data was signed with.");
			yield return new MatroskaDocMetaElement(0x000047E5, "1234     ", 0UL, null, new int[] { ContentEncryption.Id }, "The algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values:\n1 - RSA");
			yield return new MatroskaDocMetaElement(0x000047E6, "1234     ", 0UL, null, new int[] { ContentEncryption.Id }, "The hash algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values:\n1 - SHA1-160\n2 - MD5");
			yield return new MatroskaDocMetaElement(0x1C53BB6B, "1234W    ", null, null, new int[] { Segment.Id }, "A top-level element to speed seeking access. All entries are local to the segment. Should be mandatory for non 'live' streams.");
			yield return new MatroskaDocMetaElement(0x000000BB, "1234WMaMu", null, null, new int[] { Cues.Id }, "Contains all information relative to a seek point in the segment.");
			yield return new MatroskaDocMetaElement(0x000000B3, "1234WMa  ", null, null, new int[] { CuePoint.Id }, "Absolute timecode according to the segment time base.");
			yield return new MatroskaDocMetaElement(0x000000B7, "1234WMaMu", null, null, new int[] { CuePoint.Id }, "Contain positions for different tracks corresponding to the timecode.");
			yield return new MatroskaDocMetaElement(0x000000F7, "1234WMa  ", null, notNull, new int[] { CueTrackPositions.Id }, "The track for which a position is given.");
			yield return new MatroskaDocMetaElement(0x000000F1, "1234WMa  ", null, null, new int[] { CueTrackPositions.Id }, "The position of the Cluster containing the required Block.");
			yield return new MatroskaDocMetaElement(0x000000F0, "   4WMa  ", null, null, new int[] { CueTrackPositions.Id }, "The relative position of the referenced block inside the cluster with 0 being the first possible position for an element inside that cluster.");
			yield return new MatroskaDocMetaElement(0x000000B2, "   4WMa  ", null, null, new int[] { CueTrackPositions.Id }, "The duration of the block according to the segment time base. If missing the track's DefaultDuration does not apply and no duration information is available in terms of the cues.");
			yield return new MatroskaDocMetaElement(0x00005378, "1234W    ", 1UL, notNull, new int[] { CueTrackPositions.Id }, "Number of the Block in the specified Cluster.");
			yield return new MatroskaDocMetaElement(0x000000EA, " 234     ", 0UL, null, new int[] { CueTrackPositions.Id }, "The position of the Codec State corresponding to this Cue element. 0 means that the data is taken from the initial Track Entry.");
			yield return new MatroskaDocMetaElement(0x000000DB, " 234   Mu", null, null, new int[] { CueTrackPositions.Id }, "The Clusters containing the required referenced Blocks.");
			yield return new MatroskaDocMetaElement(0x00000096, " 234 Ma  ", null, null, new int[] { CueReference.Id }, "Timecode of the referenced Block.");
			yield return new MatroskaDocMetaElement(0x00000097, "     Ma  ", null, null, new int[] { CueReference.Id }, "The Position of the Cluster containing the referenced Block.");
			yield return new MatroskaDocMetaElement(0x0000535F, "         ", 1UL, notNull, new int[] { CueReference.Id }, "Number of the referenced Block of Track X in the specified Cluster.");
			yield return new MatroskaDocMetaElement(0x000000EB, "         ", 0UL, null, new int[] { CueReference.Id }, "The position of the Codec State corresponding to this referenced element. 0 means that the data is taken from the initial Track Entry.");
			yield return new MatroskaDocMetaElement(0x1941A469, "1234     ", null, null, new int[] { Segment.Id }, "Contain attached files.");
			yield return new MatroskaDocMetaElement(0x000061A7, "1234 MaMu", null, null, new int[] { Attachments.Id }, "An attached file.");
			yield return new MatroskaDocMetaElement(0x0000467E, "1234     ", null, null, new int[] { AttachedFile.Id }, "A human-friendly name for the attached file.");
			yield return new MatroskaDocMetaElement(0x0000466E, "1234 Ma  ", null, null, new int[] { AttachedFile.Id }, "Filename of the attached file.");
			yield return new MatroskaDocMetaElement(0x00004660, "1234 Ma  ", null, null, new int[] { AttachedFile.Id }, "MIME type of the file.");
			yield return new MatroskaDocMetaElement(0x0000465C, "1234 Ma  ", null, null, new int[] { AttachedFile.Id }, "The data of the file.");
			yield return new MatroskaDocMetaElement(0x000046AE, "1234 Ma  ", null, notNull, new int[] { AttachedFile.Id }, "Unique ID representing the file, as random as possible.");
			yield return new MatroskaDocMetaElement(0x00004675, "         ", null, null, new int[] { AttachedFile.Id }, "A binary value that a track/codec can refer to when the attachment is needed.");
			yield return new MatroskaDocMetaElement(0x00004661, "         ", null, null, new int[] { AttachedFile.Id }, "DivX font extension");
			yield return new MatroskaDocMetaElement(0x00004662, "         ", null, null, new int[] { AttachedFile.Id }, "DivX font extension");
			yield return new MatroskaDocMetaElement(0x1043A770, "1234     ", null, null, new int[] { Segment.Id }, "A system to define basic menus and partition data. For more detailed information, look at the Chapters Explanation.");
			yield return new MatroskaDocMetaElement(0x000045B9, "1234 MaMu", null, null, new int[] { Chapters.Id }, "Contains all information about a segment edition.");
			yield return new MatroskaDocMetaElement(0x000045BC, "1234     ", null, notNull, new int[] { EditionEntry.Id }, "A unique ID to identify the edition. It's useful for tagging an edition.");
			yield return new MatroskaDocMetaElement(0x000045BD, "1234 Ma  ", 0UL, zeroOrOne, new int[] { EditionEntry.Id }, "If an edition is hidden (1), it should not be available to the user interface (but still to Control Tracks). (1 bit)");
			yield return new MatroskaDocMetaElement(0x000045DB, "1234 Ma  ", 0UL, zeroOrOne, new int[] { EditionEntry.Id }, "If a flag is set (1) the edition should be used as the default one. (1 bit)");
			yield return new MatroskaDocMetaElement(0x000045DD, "1234     ", 0UL, zeroOrOne, new int[] { EditionEntry.Id }, "Specify if the chapters can be defined multiple times and the order to play them is enforced. (1 bit)");
			yield return new MatroskaDocMetaElement(0x000000B6, "1234 MaMu", null, null, new int[] { EditionEntry.Id, ChapterAtom.Id }, "Contains the atom information to use as the chapter atom (apply to all tracks).");
			yield return new MatroskaDocMetaElement(0x000073C4, "1234 Ma  ", null, notNull, new int[] { ChapterAtom.Id }, "A unique ID to identify the Chapter.");
			yield return new MatroskaDocMetaElement(0x00000091, "1234 Ma  ", null, null, new int[] { ChapterAtom.Id }, "Timecode of the start of Chapter (not scaled).");
			yield return new MatroskaDocMetaElement(0x00000092, "1234     ", null, null, new int[] { ChapterAtom.Id }, "Timecode of the end of Chapter (timecode excluded, not scaled).");
			yield return new MatroskaDocMetaElement(0x00000098, "1234 Ma  ", 0UL, zeroOrOne, new int[] { ChapterAtom.Id }, "If a chapter is hidden (1), it should not be available to the user interface (but still to Control Tracks). (1 bit)");
			yield return new MatroskaDocMetaElement(0x00004598, "1234 Ma  ", 1UL, zeroOrOne, new int[] { ChapterAtom.Id }, "Specify wether the chapter is enabled. It can be enabled/disabled by a Control Track. When disabled, the movie should skip all the content between the TimeStart and TimeEnd of this chapter. (1 bit)");
			yield return new MatroskaDocMetaElement(0x00006E67, "1234     ", null, greaterNull, new int[] { ChapterAtom.Id }, "A segment to play in place of this chapter. Edition ChapterSegmentEditionUID should be used for this segment, otherwise no edition is used.");
			yield return new MatroskaDocMetaElement(0x00006EBC, "1234     ", null, notNull, new int[] { ChapterAtom.Id }, "The edition to play from the segment linked in ChapterSegmentUID.");
			yield return new MatroskaDocMetaElement(0x000063C3, "1234     ", null, null, new int[] { ChapterAtom.Id }, "Specify the physical equivalent of this ChapterAtom like 'DVD' (60) or 'SIDE' (50), see complete list of values.");
			yield return new MatroskaDocMetaElement(0x0000008F, "1234     ", null, null, new int[] { ChapterAtom.Id }, "List of tracks on which the chapter applies. If this element is not present, all tracks apply");
			yield return new MatroskaDocMetaElement(0x00000089, "1234 MaMu", null, notNull, new int[] { ChapterTrack.Id }, "UID of the Track to apply this chapter too. In the absense of a control track, choosing this chapter will select the listed Tracks and deselect unlisted tracks. Absense of this element indicates that the Chapter should be applied to any currently used Tracks.");
			yield return new MatroskaDocMetaElement(0x00000080, "1234   Mu", null, null, new int[] { ChapterAtom.Id }, "Contains all possible strings to use for the chapter display.");
			yield return new MatroskaDocMetaElement(0x00000085, "1234 Ma  ", null, null, new int[] { ChapterDisplay.Id }, "Contains the string to use as the chapter atom.");
			yield return new MatroskaDocMetaElement(0x0000437C, "1234 MaMu", "eng", null, new int[] { ChapterDisplay.Id }, "The languages corresponding to the string, in the bibliographic ISO-639-2 form.");
			yield return new MatroskaDocMetaElement(0x0000437E, "1234   Mu", null, null, new int[] { ChapterDisplay.Id }, "The countries corresponding to the string, same 2 octets as in Internet domains.");
			yield return new MatroskaDocMetaElement(0x00006944, "1234   Mu", null, null, new int[] { ChapterAtom.Id }, "Contains all the commands associated to the Atom.");
			yield return new MatroskaDocMetaElement(0x00006955, "1234 Ma  ", 0UL, null, new int[] { ChapProcess.Id }, "Contains the type of the codec used for the processing. A value of 0 means native Matroska processing (to be defined), a value of 1 means the DVD command set is used. More codec IDs can be added later.");
			yield return new MatroskaDocMetaElement(0x0000450D, "1234     ", null, null, new int[] { ChapProcess.Id }, "Some optional data attached to the ChapProcessCodecID information. For ChapProcessCodecID = 1, it is the 'DVD level' equivalent.");
			yield return new MatroskaDocMetaElement(0x00006911, "1234   Mu", null, null, new int[] { ChapProcess.Id }, "Contains all the commands associated to the Atom.");
			yield return new MatroskaDocMetaElement(0x00006922, "1234 Ma  ", null, null, new int[] { ChapProcessCommand.Id }, "Defines when the process command should be handled (0: during the whole chapter, 1: before starting playback, 2: after playback of the chapter).");
			yield return new MatroskaDocMetaElement(0x00006933, "1234 Ma  ", null, null, new int[] { ChapProcessCommand.Id }, "Contains the command information. The data should be interpreted depending on the ChapProcessCodecID value. For ChapProcessCodecID = 1, the data correspond to the binary DVD cell pre/post commands.");
			yield return new MatroskaDocMetaElement(0x1254C367, "1234   Mu", null, null, new int[] { Segment.Id }, "Element containing elements specific to Tracks/Chapters. A list of valid tags can be found here.");
			yield return new MatroskaDocMetaElement(0x00007373, "1234 MaMu", null, null, new int[] { Tags.Id }, "Element containing elements specific to Tracks/Chapters.");
			yield return new MatroskaDocMetaElement(0x000063C0, "1234 Ma  ", null, null, new int[] { Tag.Id }, "Contain all UIDs where the specified meta data apply. It is empty to describe everything in the segment.");
			yield return new MatroskaDocMetaElement(0x000068CA, "1234     ", 50UL, null, new int[] { Targets.Id }, "A number to indicate the logical level of the target (see TargetType).");
			yield return new MatroskaDocMetaElement(0x000063CA, "1234     ", null, null, new int[] { Targets.Id }, "An informational string that can be used to display the logical level of the target like 'ALBUM', 'TRACK', 'MOVIE', 'CHAPTER', etc (see TargetType).");
			yield return new MatroskaDocMetaElement(0x000063C5, "1234   Mu", 0UL, null, new int[] { Targets.Id }, "A unique ID to identify the Track(s) the tags belong to. If the value is 0 at this level, the tags apply to all tracks in the Segment.");
			yield return new MatroskaDocMetaElement(0x000063C9, "1234   Mu", 0UL, null, new int[] { Targets.Id }, "A unique ID to identify the EditionEntry(s) the tags belong to. If the value is 0 at this level, the tags apply to all editions in the Segment.");
			yield return new MatroskaDocMetaElement(0x000063C4, "1234   Mu", 0UL, null, new int[] { Targets.Id }, "A unique ID to identify the Chapter(s) the tags belong to. If the value is 0 at this level, the tags apply to all chapters in the Segment.");
			yield return new MatroskaDocMetaElement(0x000063C6, "1234   Mu", 0UL, null, new int[] { Targets.Id }, "A unique ID to identify the Attachment(s) the tags belong to. If the value is 0 at this level, the tags apply to all the attachments in the Segment.");
			yield return new MatroskaDocMetaElement(0x000067C8, "1234 MaMu", null, null, new int[] { Tag.Id, SimpleTag.Id }, "Contains general information about the target.");
			yield return new MatroskaDocMetaElement(0x000045A3, "1234 Ma  ", null, null, new int[] { SimpleTag.Id }, "The name of the Tag that is going to be stored.");
			yield return new MatroskaDocMetaElement(0x0000447A, "1234 Ma  ", "und", null, new int[] { SimpleTag.Id }, "Specifies the language of the tag specified, in the Matroska languages form.");
			yield return new MatroskaDocMetaElement(0x00004484, "1234 Ma  ", 1UL, zeroOrOne, new int[] { SimpleTag.Id }, "Indication to know if this is the default/original language to use for the given tag. (1 bit)");
			yield return new MatroskaDocMetaElement(0x00004487, "1234     ", null, null, new int[] { SimpleTag.Id }, "The value of the Tag.");
			yield return new MatroskaDocMetaElement(0x00004485, "1234     ", null, null, new int[] { SimpleTag.Id }, "The values of the Tag if it is binary. Note that this cannot be used in the same SimpleTag as TagString.");
		}

	}

	public enum MatroskaVersion { Unknown = 0, V1 = 1, V2 = 2, V3 = 4, V4 = 8, WebM = 1024 }
}
